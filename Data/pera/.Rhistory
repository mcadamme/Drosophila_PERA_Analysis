skewed <- data.frame(skewed)
bias <- data.frame(bias)
plot(skewed$Hexp~skewed$num_alleles)
plot(skewed$Hexp~skewed$num_alleles, type = "p")
plot
?plot
plot(skewed$Hexp~skewed$num_alleles, type = "l")
str(skewed)
skewed$num_alleles <- as.numeric(skewed$num_alleles)
skewed$Hexp <- as.numeric(skewed$Hexp)
plot(skewed$Hexp~skewed$num_alleles, type = "l")
plot(skewed$Hexp~skewed$num_alleles, type = "h")
num_alleles <- as.numeric(c(2,2,4,4,8,8,16,16))
Hexp <- as.numeric(c(0.095, 0.5, 0.27, 0.75, 0.56, 0.875, 0.9, 0.938)
)
data <- data.frame(cbind(num_alleles, bias, Hexp))
str(dat)
str(data)
skewed <- subset(data, bias = "skewed")
uniform <- subset(data, bias = "uniform")
plot(skewed$Hexp~skewed$num_alleles, type = "h")
plot(skewed$Hexp~skewed$num_alleles, type = "")
plot(skewed$Hexp~skewed$num_alleles, type = "l")
plot(skewed$Hexp~skewed$num_alleles, type = "p")
View(data)
#to understand expected heterozygosity as the number of alleles grows
bias <- c("skewed", "uniform", "skewed", "uniform", "skewed", "uniform", "skewed", "uniform")
Hexp <- as.numeric(c(0.095, 0.5, 0.27, 0.75, 0.56, 0.875, 0.9, 0.938))
num_alleles <- as.numeric(c(2,2,4,4,8,8,16,16))
data <- data.frame(cbind(bias,Hexp,num_alleles))
S <- subset(data, bias == "skewed")
U <- subset(data, bias == "uniform")
plot(S$Hexp~S$num_alleles, ylim = c(0,1), type = "p", pch = 16)
plot(S$Hexp~S$num_alleles, ylim = c(0,1), type = "h", pch = 16)
plot(S$Hexp~S$num_alleles, ylim = c(0,1), pch = 16)
?plot
View(S)
str(S)
plot(data$Hexp~data$num_alleles, ylim = c(0,1), pch = 16)
str(data)
bias <- c("skewed", "uniform", "skewed", "uniform", "skewed", "uniform", "skewed", "uniform")
Hexp <- as.numeric(c(0.095, 0.5, 0.27, 0.75, 0.56, 0.875, 0.9, 0.938))
num_alleles <- as.numeric(c(2,2,4,4,8,8,16,16))
data <- data.frame(cbind(bias,as.numeric(Hexp),as.numeric(num_alleles))
)
data <- data.frame(cbind(bias,as.numeric(Hexp),as.numeric(num_alleles)))
plot(data$Hexp~data$num_alleles, ylim = c(0,1), pch = 16)
View(data)
?colnames
colnames(data) <- c("bias", "Hexp", "num_alleles")
plot(data$Hexp~data$num_alleles, ylim = c(0,1), pch = 16)
str(data)
plot(Hexp~num_alleles)
plot(Hexp_s ~ num_alleles, ylim = c(0,1), type = "p", pch = 16, col = black)
plot(Hexp_s ~ num_alleles, ylim = c(0,1), type = "p", pch = 16, col = "black")
Hexp_s <- as.numeric(c(0.095, 0.27, 0.56, 0.9))
Hexp_u <- as.numeric(c(0.5, 0.75, 0.875, 0.938))
num_alleles <- as.numeric(c(2,4,8,16))
plot(Hexp_s ~ num_alleles, ylim = c(0,1), type = "p", pch = 16, col = "black")
points(Hexp_u ~ num_alleles, ylim = c(0,1), type = "p", pch = 16, col = "blue")
plot(Hexp_s ~ num_alleles, ylim = c(0,1), type = "l", pch = 16, col = "black")
points(Hexp_u ~ num_alleles, ylim = c(0,1), type = "l", pch = 16, col = "blue")
plot(Hexp_s ~ num_alleles, ylim = c(0,1), type = "l", pch = 16, col = "black", ylab = "Hexp")
points(Hexp_u ~ num_alleles, ylim = c(0,1), type = "l", pch = 16, col = "blue")
install.packages("pegas")
install.packages("devtools")
install.packages("devtools")
install.packages("sciplot")
install.packages("lme4")
install.packages("car")
install.packages("effects")
install.packages("bbmle")
install.packages("ggplot2")
install.packages("gridExtra")
x <- c("sciplot", "lme4", "car", "effects", "bbmle", "ggplot2", "gridExtra")
lapply(x, FUN = function(X) {
do.call("library", list(X))
})
#Data Analysis for PERAs - tastants applied to labellar sensilla.
x <- c("sciplot", "lme4", "car", "effects", "bbmle", "ggplot2", "gridExtra")
lapply(x, FUN = function(X) {
do.call("library", list(X))
})
# Megan uses this
setwd("~/Dropbox/Megan/Drosophila_work/Data/pera")
NaCl_data <- read.table("PERA_NaCl_edited.txt", header = T)
NaCl_data <- data.frame(NaCl_data)
NaCl_barom <- read.table("NaCl_barom_readings.txt", header = T)
NaCl_barom$delta_pres <- (NaCl_barom$pressure_6am - NaCl_barom$pressure_9am)
KCl_data <- read.table("PERA_KCl.txt", header = T)
KCl_data <- data.frame(KCl_data)
KCl_barom <- read.table("KCl_barom_readings.txt", header = T)
KCl_barom$delta_pres <- (KCl_barom$pressure_6am - KCl_barom$pressure_9am)
#Checking for duplicate rows in each dataset
sum(duplicated(NaCl_data))
sum(duplicated(KCl_data))
#merging barometric pressure into data sets.
NaCl_data_pres <- merge(NaCl_data, NaCl_barom, by="date_test")
KCl_data_pres <- merge(KCl_data, KCl_barom, by="date_test")
probos_N <- subset(NaCl_data_pres, receptor == "prob")  #should look at tarsi too, but in later analysis.
probos_K <- subset(KCl_data_pres, receptor == "prob")
##getting some preliminary plots of average responses.
probos_N$date_test <- as.numeric(probos_N$date_test)#change this back to factor for analysis
probos_K$date_test <- as.numeric(probos_K$date_test)#change this back to factor for analysis
probos_N$subject <- with(probos_N, interaction(Allele, Background, Sex, date_test, Fly, salt_conc, drop=T, sep="_"))
probos_N$date_test <- as.factor(probos_N$date_test)
#reshaping big data sets into long format
NaCl_reshaped <- reshape(probos_N,
varying = list(7:13),
direction="long",
idvar="subject",
v.names="PER")
NaCl_reshaped <- NaCl_reshaped[order(NaCl_reshaped$subject),]
probos_N <- probos_N[order(probos_N$subject),]
head(NaCl_reshaped) #checking to be sure that reshape worked.
head(probos_N)
tail(NaCl_reshaped)
tail(probos_N)
probos_K$subject <- with(probos_K, interaction(Allele, Background, Sex, date_test, Fly, salt_conc, drop=T, sep="_"))
probos_K$date_test <- as.factor(probos_K$date_test)
KCl_reshaped <- reshape(probos_K,
varying = list(7:13),
direction="long",
idvar="subject",
v.names="PER")
KCl_reshaped <- KCl_reshaped[order(KCl_reshaped$subject),]
probos_K <- probos_K[order(probos_K$subject),]
head(KCl_reshaped) #checking to be sure that reshape worked.
head(probos_K)
tail(KCl_reshaped)
tail(probos_K)
#now I need to add in columns for treatment
NaCl_reshaped[23:24, "Treatment"] <- NA
NaCl_reshaped$Treatment <- NaCl_reshaped$time
NaCl_reshaped$Treatment <- ifelse(NaCl_reshaped$Treatment == 2, "sugar", ifelse(NaCl_reshaped$Treatment == 5, "sugar",
ifelse(NaCl_reshaped$Treatment == 3, "salt", ifelse(NaCl_reshaped$Treatment == 6, "salt", "h2o"))))
str(NaCl_reshaped)
NaCl_reshaped$Treatment <- as.factor(NaCl_reshaped$Treatment)
#modifying time to reflect true order of presentation
NaCl_sugfirst <- subset(NaCl_reshaped, Sugar_before_salt == "y")
NaCl_saltfirst <- subset(NaCl_reshaped, Sugar_before_salt == "n")
NaCl_saltfirst$time[NaCl_saltfirst$time == 2] <- 3.1
NaCl_saltfirst$time[NaCl_saltfirst$time == 3] <- 2
NaCl_saltfirst$time[NaCl_saltfirst$time == 3.1] <- 3
NaCl_saltfirst$time[NaCl_saltfirst$time == 5] <- 6.1
NaCl_saltfirst$time[NaCl_saltfirst$time == 6] <- 5
NaCl_saltfirst$time[NaCl_saltfirst$time == 6.1] <- 6
NaCl_reshaped <- rbind(NaCl_sugfirst, NaCl_saltfirst)
KCl_reshaped[23:24, "Treatment"] <- NA
KCl_reshaped$Treatment <- KCl_reshaped$time
KCl_reshaped$Treatment <- ifelse(KCl_reshaped$Treatment == 2, "sugar", ifelse(KCl_reshaped$Treatment == 5, "sugar",
ifelse(KCl_reshaped$Treatment == 3, "salt", ifelse(KCl_reshaped$Treatment == 6, "salt", "h2o"))))
str(KCl_reshaped)
KCl_reshaped$Treatment <- as.factor(KCl_reshaped$Treatment)
KCl_sugfirst <- subset(KCl_reshaped, Sugar_before_salt == "y")
KCl_saltfirst <- subset(KCl_reshaped, Sugar_before_salt == "n")
KCl_saltfirst$time[KCl_saltfirst$time == 2] <- 3.1
KCl_saltfirst$time[KCl_saltfirst$time == 3] <- 2
KCl_saltfirst$time[KCl_saltfirst$time == 3.1] <- 3
KCl_saltfirst$time[KCl_saltfirst$time == 5] <- 6.1
KCl_saltfirst$time[KCl_saltfirst$time == 6] <- 5
KCl_saltfirst$time[KCl_saltfirst$time == 6.1] <- 6
KCl_reshaped <- rbind(KCl_sugfirst, KCl_saltfirst)
#modeling NaCl data first.
NaCl_reshaped$Allele <- relevel(NaCl_reshaped$Allele, ref = "wt")
model_trial_1 <- glm(PER ~ Background*Allele*Sex*Treatment + salt_conc + date_test +
Sugar_before_salt + time + delta_pres + avg_salt + avg_h2o,
data=NaCl_reshaped, family=binomial, x=T)
summary(model_trial_1)
#Getting average response per fly to each stimulus
#NaCl
NaCl_data_pres[24:25, "avg_h2o"] <- NA
NaCl_data_pres[25:26, "avg_sugar"] <- NA
NaCl_data_pres[26:27, "avg_salt"] <- NA
NaCl_data_pres <- transform(NaCl_data_pres, avg_h2o = rowMeans(NaCl_data[, c(7, 10, 13)], na.rm = TRUE))
NaCl_data_pres <- transform(NaCl_data_pres, avg_sugar = rowMeans(NaCl_data[, c(8,11)], na.rm = TRUE))
NaCl_data_pres <- transform(NaCl_data_pres, avg_salt = rowMeans(NaCl_data[, c(9,12)], na.rm = TRUE))
#KCl
KCl_data_pres[24:25, "avg_h2o"] <- NA
KCl_data_pres[25:26, "avg_sugar"] <- NA
KCl_data_pres[26:27, "avg_salt"] <- NA
KCl_data_pres <- transform(KCl_data_pres, avg_h2o = rowMeans(KCl_data[, c(7, 10, 13)], na.rm = TRUE))
KCl_data_pres <- transform(KCl_data_pres, avg_sugar = rowMeans(KCl_data[, c(8,11)], na.rm = TRUE))
KCl_data_pres <- transform(KCl_data_pres, avg_salt = rowMeans(KCl_data[, c(9,12)], na.rm = TRUE))
###First looking at avg responses by individuals tested using labellar receptors
probos_N <- subset(NaCl_data_pres, receptor == "prob")  #should look at tarsi too, but in later analysis.
probos_K <- subset(KCl_data_pres, receptor == "prob")
##getting some preliminary plots of average responses.
probos_N$date_test <- as.numeric(probos_N$date_test)#change this back to factor for analysis
probos_K$date_test <- as.numeric(probos_K$date_test)#change this back to factor for analysis
probos_N$subject <- with(probos_N, interaction(Allele, Background, Sex, date_test, Fly, salt_conc, drop=T, sep="_"))
probos_N$date_test <- as.factor(probos_N$date_test)
#reshaping big data sets into long format
NaCl_reshaped <- reshape(probos_N,
varying = list(7:13),
direction="long",
idvar="subject",
v.names="PER")
NaCl_reshaped <- NaCl_reshaped[order(NaCl_reshaped$subject),]
probos_N <- probos_N[order(probos_N$subject),]
head(NaCl_reshaped) #checking to be sure that reshape worked.
head(probos_N)
tail(NaCl_reshaped)
tail(probos_N)
probos_K$subject <- with(probos_K, interaction(Allele, Background, Sex, date_test, Fly, salt_conc, drop=T, sep="_"))
probos_K$date_test <- as.factor(probos_K$date_test)
KCl_reshaped <- reshape(probos_K,
varying = list(7:13),
direction="long",
idvar="subject",
v.names="PER")
KCl_reshaped <- KCl_reshaped[order(KCl_reshaped$subject),]
probos_K <- probos_K[order(probos_K$subject),]
head(KCl_reshaped) #checking to be sure that reshape worked.
head(probos_K)
tail(KCl_reshaped)
tail(probos_K)
#now I need to add in columns for treatment
NaCl_reshaped[23:24, "Treatment"] <- NA
NaCl_reshaped$Treatment <- NaCl_reshaped$time
NaCl_reshaped$Treatment <- ifelse(NaCl_reshaped$Treatment == 2, "sugar", ifelse(NaCl_reshaped$Treatment == 5, "sugar",
ifelse(NaCl_reshaped$Treatment == 3, "salt", ifelse(NaCl_reshaped$Treatment == 6, "salt", "h2o"))))
str(NaCl_reshaped)
NaCl_reshaped$Treatment <- as.factor(NaCl_reshaped$Treatment)
#modifying time to reflect true order of presentation
NaCl_sugfirst <- subset(NaCl_reshaped, Sugar_before_salt == "y")
NaCl_saltfirst <- subset(NaCl_reshaped, Sugar_before_salt == "n")
NaCl_saltfirst$time[NaCl_saltfirst$time == 2] <- 3.1
NaCl_saltfirst$time[NaCl_saltfirst$time == 3] <- 2
NaCl_saltfirst$time[NaCl_saltfirst$time == 3.1] <- 3
NaCl_saltfirst$time[NaCl_saltfirst$time == 5] <- 6.1
NaCl_saltfirst$time[NaCl_saltfirst$time == 6] <- 5
NaCl_saltfirst$time[NaCl_saltfirst$time == 6.1] <- 6
NaCl_reshaped <- rbind(NaCl_sugfirst, NaCl_saltfirst)
KCl_reshaped[23:24, "Treatment"] <- NA
KCl_reshaped$Treatment <- KCl_reshaped$time
KCl_reshaped$Treatment <- ifelse(KCl_reshaped$Treatment == 2, "sugar", ifelse(KCl_reshaped$Treatment == 5, "sugar",
ifelse(KCl_reshaped$Treatment == 3, "salt", ifelse(KCl_reshaped$Treatment == 6, "salt", "h2o"))))
str(KCl_reshaped)
KCl_reshaped$Treatment <- as.factor(KCl_reshaped$Treatment)
KCl_sugfirst <- subset(KCl_reshaped, Sugar_before_salt == "y")
KCl_saltfirst <- subset(KCl_reshaped, Sugar_before_salt == "n")
KCl_saltfirst$time[KCl_saltfirst$time == 2] <- 3.1
KCl_saltfirst$time[KCl_saltfirst$time == 3] <- 2
KCl_saltfirst$time[KCl_saltfirst$time == 3.1] <- 3
KCl_saltfirst$time[KCl_saltfirst$time == 5] <- 6.1
KCl_saltfirst$time[KCl_saltfirst$time == 6] <- 5
KCl_saltfirst$time[KCl_saltfirst$time == 6.1] <- 6
KCl_reshaped <- rbind(KCl_sugfirst, KCl_saltfirst)
#modeling NaCl data first.
NaCl_reshaped$Allele <- relevel(NaCl_reshaped$Allele, ref = "wt")
model_trial_1 <- glm(PER ~ Background*Allele*Sex*Treatment + salt_conc + date_test +
Sugar_before_salt + time + delta_pres + avg_salt + avg_h2o,
data=NaCl_reshaped, family=binomial, x=T)
summary(model_trial_1)
NaCl_reshaped$salt_conc <- as.factor(NaCl_reshaped$salt_conc) #solved first convergence issue by making salt_conc as factor
model_trial_2 <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial)
summary(model_trial_2) #do parameter estimates at least look similar to previous estimates when run with R 2.15.1 (no error)?
model_trial_2_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial, control=glmerControl(optimizer = "nloptwrap"))
summary(model_trial_2_optim)
model_trial_2.1_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, nAGQ=0, family=binomial,
control=glmerControl(optimizer = "nloptwrap"))
summary(model_trial_2.1_optim)
car::Anova(model_trial_2.1_optim)
afurl <- "https://raw.githubusercontent.com/lme4/lme4/master/misc/issues/allFit.R"
eval(parse(text=getURL(afurl)))
install.packages"RCurl"
install.packages("RCurl")
x <- c("sciplot", "lme4", "car", "effects", "bbmle", "ggplot2", "gridExtra", "RCurl")
lapply(x, FUN = function(X) {
do.call("library", list(X))
})
afurl <- "https://raw.githubusercontent.com/lme4/lme4/master/misc/issues/allFit.R"
eval(parse(text=getURL(afurl)))
install.packages("mixed")
model_trial_2.2_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, nAGQ=0, family=binomial,
control=glmerControl(optimizer = "optimx.nlminb"))
x <- c("sciplot", "lme4", "car", "effects", "bbmle", "ggplot2", "gridExtra", "RCurl", "optimx")
lapply(x, FUN = function(X) {
do.call("library", list(X))
})
model_trial_2.2_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, nAGQ=0, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="nlminb")))
summary(model_trial_2.2_optim)
model_trial_3 <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="nlminb")))
summary(model_trial_3)#this is model1 in my manuscript
car::Anova(model_trial_3)
str(NaCl_reshaped)
model_trial_2.3_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, nAGQ=0, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="L-BFGS-B")))
summary(model_trial_2.3_optim)
#trying optimx - nlminb.
model_trial_2.2_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="nlminb")))
summary(model_trial_2.2_optim)
#trying optimx - L-BFGS-B
model_trial_2.3_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="L-BFGS-B")))
#Tried to get rid of non-convergence warnings by scaling time & rerunning model2. Did not work.
NaCl_reshaped$time_sc <- scale(NaCl_reshaped$time)
NaCl_reshaped$delta_pres_sc <- scale(NaCl_reshaped$delta_pres)
model_trial_2_scaled <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time_sc + delta_pres_sc + (1 + time_sc + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial)
model_trial_2
summary(model_trial_2)
ss <- getME(model_trial_2, c("theta","fixef"))
model_trial_2_cont <- update(model_trial_2, start=ss,control=glmerControl(optCtrl=list(maxfun=2e4)))
#Data Analysis for PERAs - tastants applied to labellar sensilla.
x <- c("sciplot", "lme4", "car", "effects", "bbmle", "ggplot2", "gridExtra", "RCurl", "optimx")
lapply(x, FUN = function(X) {
do.call("library", list(X))
})
# Megan uses this
setwd("~/Dropbox/Megan/Drosophila_work/Data/pera")
#Loading data sets
NaCl_data <- read.table("PERA_NaCl_edited.txt", header = T)
NaCl_data <- data.frame(NaCl_data)
NaCl_barom <- read.table("NaCl_barom_readings.txt", header = T)
NaCl_barom$delta_pres <- (NaCl_barom$pressure_6am - NaCl_barom$pressure_9am)
KCl_data <- read.table("PERA_KCl.txt", header = T)
KCl_data <- data.frame(KCl_data)
KCl_barom <- read.table("KCl_barom_readings.txt", header = T)
KCl_barom$delta_pres <- (KCl_barom$pressure_6am - KCl_barom$pressure_9am)
#Checking for duplicate rows in each dataset
sum(duplicated(NaCl_data))
sum(duplicated(KCl_data))
#merging barometric pressure into data sets.
NaCl_data_pres <- merge(NaCl_data, NaCl_barom, by="date_test")
KCl_data_pres <- merge(KCl_data, KCl_barom, by="date_test")
#Getting average response per fly to each stimulus
#NaCl
NaCl_data_pres[24:25, "avg_h2o"] <- NA
NaCl_data_pres[25:26, "avg_sugar"] <- NA
NaCl_data_pres[26:27, "avg_salt"] <- NA
NaCl_data_pres <- transform(NaCl_data_pres, avg_h2o = rowMeans(NaCl_data[, c(7, 10, 13)], na.rm = TRUE))
NaCl_data_pres <- transform(NaCl_data_pres, avg_sugar = rowMeans(NaCl_data[, c(8,11)], na.rm = TRUE))
NaCl_data_pres <- transform(NaCl_data_pres, avg_salt = rowMeans(NaCl_data[, c(9,12)], na.rm = TRUE))
#KCl
KCl_data_pres[24:25, "avg_h2o"] <- NA
KCl_data_pres[25:26, "avg_sugar"] <- NA
KCl_data_pres[26:27, "avg_salt"] <- NA
KCl_data_pres <- transform(KCl_data_pres, avg_h2o = rowMeans(KCl_data[, c(7, 10, 13)], na.rm = TRUE))
KCl_data_pres <- transform(KCl_data_pres, avg_sugar = rowMeans(KCl_data[, c(8,11)], na.rm = TRUE))
KCl_data_pres <- transform(KCl_data_pres, avg_salt = rowMeans(KCl_data[, c(9,12)], na.rm = TRUE))
###First looking at avg responses by individuals tested using labellar receptors
probos_N <- subset(NaCl_data_pres, receptor == "prob")  #should look at tarsi too, but in later analysis.
probos_K <- subset(KCl_data_pres, receptor == "prob")
##getting some preliminary plots of average responses.
probos_N$date_test <- as.numeric(probos_N$date_test)#change this back to factor for analysis
probos_K$date_test <- as.numeric(probos_K$date_test)#change this back to factor for analysis
probos_N$subject <- with(probos_N, interaction(Allele, Background, Sex, date_test, Fly, salt_conc, drop=T, sep="_"))
probos_N$date_test <- as.factor(probos_N$date_test)
#reshaping big data sets into long format
NaCl_reshaped <- reshape(probos_N,
varying = list(7:13),
direction="long",
idvar="subject",
v.names="PER")
NaCl_reshaped <- NaCl_reshaped[order(NaCl_reshaped$subject),]
probos_N <- probos_N[order(probos_N$subject),]
head(NaCl_reshaped) #checking to be sure that reshape worked.
head(probos_N)
tail(NaCl_reshaped)
tail(probos_N)
probos_K$subject <- with(probos_K, interaction(Allele, Background, Sex, date_test, Fly, salt_conc, drop=T, sep="_"))
probos_K$date_test <- as.factor(probos_K$date_test)
KCl_reshaped <- reshape(probos_K,
varying = list(7:13),
direction="long",
idvar="subject",
v.names="PER")
KCl_reshaped <- KCl_reshaped[order(KCl_reshaped$subject),]
probos_K <- probos_K[order(probos_K$subject),]
head(KCl_reshaped) #checking to be sure that reshape worked.
head(probos_K)
tail(KCl_reshaped)
tail(probos_K)
#now I need to add in columns for treatment
NaCl_reshaped[23:24, "Treatment"] <- NA
NaCl_reshaped$Treatment <- NaCl_reshaped$time
NaCl_reshaped$Treatment <- ifelse(NaCl_reshaped$Treatment == 2, "sugar", ifelse(NaCl_reshaped$Treatment == 5, "sugar",
ifelse(NaCl_reshaped$Treatment == 3, "salt", ifelse(NaCl_reshaped$Treatment == 6, "salt", "h2o"))))
str(NaCl_reshaped)
NaCl_reshaped$Treatment <- as.factor(NaCl_reshaped$Treatment)
#modifying time to reflect true order of presentation
NaCl_sugfirst <- subset(NaCl_reshaped, Sugar_before_salt == "y")
NaCl_saltfirst <- subset(NaCl_reshaped, Sugar_before_salt == "n")
NaCl_saltfirst$time[NaCl_saltfirst$time == 2] <- 3.1
NaCl_saltfirst$time[NaCl_saltfirst$time == 3] <- 2
NaCl_saltfirst$time[NaCl_saltfirst$time == 3.1] <- 3
NaCl_saltfirst$time[NaCl_saltfirst$time == 5] <- 6.1
NaCl_saltfirst$time[NaCl_saltfirst$time == 6] <- 5
NaCl_saltfirst$time[NaCl_saltfirst$time == 6.1] <- 6
NaCl_reshaped <- rbind(NaCl_sugfirst, NaCl_saltfirst)
KCl_reshaped[23:24, "Treatment"] <- NA
KCl_reshaped$Treatment <- KCl_reshaped$time
KCl_reshaped$Treatment <- ifelse(KCl_reshaped$Treatment == 2, "sugar", ifelse(KCl_reshaped$Treatment == 5, "sugar",
ifelse(KCl_reshaped$Treatment == 3, "salt", ifelse(KCl_reshaped$Treatment == 6, "salt", "h2o"))))
str(KCl_reshaped)
KCl_reshaped$Treatment <- as.factor(KCl_reshaped$Treatment)
KCl_sugfirst <- subset(KCl_reshaped, Sugar_before_salt == "y")
KCl_saltfirst <- subset(KCl_reshaped, Sugar_before_salt == "n")
KCl_saltfirst$time[KCl_saltfirst$time == 2] <- 3.1
KCl_saltfirst$time[KCl_saltfirst$time == 3] <- 2
KCl_saltfirst$time[KCl_saltfirst$time == 3.1] <- 3
KCl_saltfirst$time[KCl_saltfirst$time == 5] <- 6.1
KCl_saltfirst$time[KCl_saltfirst$time == 6] <- 5
KCl_saltfirst$time[KCl_saltfirst$time == 6.1] <- 6
KCl_reshaped <- rbind(KCl_sugfirst, KCl_saltfirst)
#modeling NaCl data first.
NaCl_reshaped$Allele <- relevel(NaCl_reshaped$Allele, ref = "wt")
model_trial_1 <- glm(PER ~ Background*Allele*Sex*Treatment + salt_conc + date_test +
Sugar_before_salt + time + delta_pres + avg_salt + avg_h2o,
data=NaCl_reshaped, family=binomial, x=T)
summary(model_trial_1)
NaCl_reshaped$salt_conc <- as.factor(NaCl_reshaped$salt_conc) #solved first convergence issue by making salt_conc as factor
model_trial_2 <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial)
summary(model_trial_2) #do parameter estimates at least look similar to previous estimates when run with R 2.15.1 (prev had no error)?
#Tried to get rid of non-convergence warnings by scaling time & rerunning model2. Did not work.
NaCl_reshaped$time_sc <- scale(NaCl_reshaped$time)
NaCl_reshaped$delta_pres_sc <- scale(NaCl_reshaped$delta_pres)
model_trial_2_scaled <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time_sc + delta_pres_sc + (1 + time_sc + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial)
summary(model_trial_2_scaled)
#bumping up number iterations - doesn't help.
ss <- getME(model_trial_2, c("theta","fixef"))
model_trial_2_cont <- update(model_trial_2, start=ss,control=glmerControl(optCtrl=list(maxfun=2e4)))
#trying different optimizer - nloptwrap neldermead?
model_trial_2_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial, control=glmerControl(optimizer = "nloptwrap"))
summary(model_trial_2_optim) #still fails to converge.
#trying nAGQ=0 per this thread: https://stat.ethz.ch/pipermail/r-sig-mixed-models/2017q3/025802.html
model_trial_2_fewIt <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, nAGQ=0, family=binomial) #brute force gets rid of warning
summary(model_trial_2_fewIt)
car::Anova(model_trial_2_fewIt)
#gets rid warnings, but not sure this is the best approach. Will come back to it.
#trying optimx - nlminb.
model_trial_2.1_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="nlminb")))
summary(model_trial_2.1_optim) #warning: degenerate  Hessian with 1 negative eigenvalues
#trying optimx - L-BFGS-B
model_trial_2.2_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "optimx", optCtrl = list(method="L-BFGS-B")))
summary(model_trial_2.2_optim)
#trying bobyqa optimizer
model_trial_2.3_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "nloptwrap", optCtrl = list(method="NLOPT_LN_BOBYQA")))
summary(model_trial_2.3_optim)
#looking at differences in model likelihoods
model_list <- c(model_trial_2, model_trial_2_cont, model_trial_2_fewIt, model_trial_2_optim,
model_trial_2.1_optim, model_trial_2.2_optim, model_trial_2.3_optim)
lliks <- sort(sapply(model_list, logLik))
lliks
model_trial_2.4_optim <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + time + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial,
control=glmerControl(optimizer = "bobyqa"))
summary(model_trial_2.4_optim)
#looking at differences in model likelihoods
model_list <- c(model_trial_2, model_trial_2_cont, model_trial_2_fewIt, model_trial_2_optim,
model_trial_2.1_optim, model_trial_2.2_optim, model_trial_2.3_optim, model_trial_2.4_optim)
lliks <- sort(sapply(model_list, logLik))
lliks
lliks <- sapply(model_list, logLik)
lliks
model_list
lliks
summary(model_trial_2.4_optim)
lliks
model_trial_3 <- glmer(PER ~ (Background*Allele*Treatment) + Sex + salt_conc +
Sugar_before_salt + time + delta_pres + (1 + Treatment|subject) +
(1|date_test), data=NaCl_reshaped, family=binomial)
logLik(model_trial_3)
lliks
AIC(model_trial_3)
AIC(model_trial_2)
BIC(model_trial_3)
BIC(model_trial_2)
BIC(model_trial_2, model_trial_3)
AIC(model_trial_2, model_trial_3)
